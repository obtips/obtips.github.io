<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>237号房间</title><link>https://cell.237927.xyz</link><description>希望，或许是最好的东西。</description><copyright>237号房间</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://cell.237927.xyz/avatar.svg</url><title>avatar</title><link>https://cell.237927.xyz</link></image><lastBuildDate>Wed, 24 Jul 2024 09:19:36 +0000</lastBuildDate><managingEditor>237号房间</managingEditor><ttl>60</ttl><webMaster>237号房间</webMaster><item><title>[Swift 官方教程]06 函数</title><link>https://cell.237927.xyz/post/%5BSwift%20-guan-fang-jiao-cheng-%5D06%20-han-shu.html</link><description>[Swift官方文档同步的中文快速入门教程](https://github.com/YugenFring/swift-tutorial-quickstart/wiki)&#13;
&#13;
建议: 重点在隐式返回及其后面的部分&#13;
## [定义和调用 (Defining and Calling Functions)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Defining-and-Calling-Functions)&#13;
---&#13;
```swift&#13;
func greet(person: String) -&gt; String {&#13;
    let greeting = 'Hello, ' + person + '!'&#13;
    return greeting&#13;
}&#13;
&#13;
print(greet(person: 'root'))&#13;
```&#13;
## [参数和返回值 (Function Parameters and Return Values)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Function-Parameters-and-Return-Values)&#13;
---&#13;
### [无参 (Functions Without Parameters)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Functions-Without-Parameters)&#13;
&#13;
```swift&#13;
func greet() -&gt; String {&#13;
    return 'hello, world'&#13;
}&#13;
&#13;
print(greet())&#13;
```&#13;
### [多参 (Functions With Multiple Parameters)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Functions-With-Multiple-Parameters)&#13;
&#13;
```swift&#13;
func greet(person: String, account: Int) -&gt; String {&#13;
    return 'Hello \(person), your account is \(account).'&#13;
}&#13;
&#13;
print(greet(person: 'Tim', account: 12330))&#13;
```&#13;
### [无返回值 (Functions Without Return Values)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Functions-Without-Return-Values)&#13;
&#13;
```swift&#13;
func greet(person: String) {&#13;
    print('Hello, \(person)!')&#13;
}&#13;
&#13;
greet(person: 'Dave')&#13;
```&#13;
&#13;
实际上返回了一个类型为 `Void` 的值, 是一个空 Tuple, 即 `()`&#13;
### [多返回值 (Functions with Multiple Return Values)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Functions-with-Multiple-Return-Values)&#13;
&#13;
比如求最大最小值:&#13;
```swift&#13;
func minMax(array: [Int]) -&gt; (min: Int, max: Int) {&#13;
    var currentMin = array[0]&#13;
    var currentMax = array[0]&#13;
    for v in array[1..&lt;array.count] {&#13;
        if v &lt; currentMin {&#13;
            currentMin = v&#13;
        } else if v &gt; currentMax {&#13;
            currentMax = v&#13;
        }&#13;
    }&#13;
    return (currentMin, currentMax)&#13;
}&#13;
&#13;
let result = minMax(array: [7, 13, 28, 14, 5])&#13;
print(result.min, result.max)&#13;
```&#13;
#### [可选元组返回类型 (Optional Tuple Return Types)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Optional-Tuple-Return-Types)&#13;
&#13;
```swift&#13;
func minMax(array: [Int]) -&gt; (min: Int, max: Int)? {&#13;
    if array.isEmpty { return nil}&#13;
    &#13;
    var currentMin = array[0]&#13;
    var currentMax = array[0]&#13;
    for v in array[1..&lt;array.count] {&#13;
        if v &lt; currentMin {&#13;
            currentMin = v&#13;
        } else if v &gt; currentMax {&#13;
            currentMax = v&#13;
        }&#13;
    }&#13;
    return (currentMin, currentMax)&#13;
}&#13;
&#13;
if let result = minMax(array: [7, 13, 28, 14, 5]) {&#13;
    print(result.min, result.max)&#13;
}&#13;
```&#13;
### [隐式返回 (Functions With an Implicit Return)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Functions-With-an-Implicit-Return)&#13;
&#13;
函数仅由一个返回表达式构成, 那么可以省略 `return`:&#13;
```swift&#13;
func greet(for person: String) -&gt; String {&#13;
    'Hello, ' + person + '!'&#13;
}&#13;
&#13;
print(greet(for: 'Dave'))&#13;
```&#13;
## [形参标签和实参名称 (Function Argument Labels and Parameter Names)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Function-Argument-Labels-and-Parameter-Names)&#13;
---&#13;
默认使用形参标签作为实参名称&#13;
```swift&#13;
func greet(person: String, from hometown: String) -&gt; String {&#13;
    return 'Hello \(person)!  Glad you could visit from \(hometown).'&#13;
}&#13;
&#13;
print(greet(person: 'Bill', from: 'Cupertino'))&#13;
```&#13;
### [可忽略的形参标签 (Omitting Argument Labels)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Omitting-Argument-Labels)&#13;
&#13;
```swift&#13;
func greet(_ person: String, from hometown: String) -&gt; String {&#13;
    return 'Hello \(person)! Glad you could visit from \(hometown)'&#13;
}&#13;
&#13;
print(greet('Bill', from: 'Cupertino'))&#13;
```&#13;
### [默认参数值 (Default Parameter Values)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Default-Parameter-Values)&#13;
&#13;
```swift&#13;
func greet(person: String, from hometown: String = 'New York') -&gt; String {&#13;
    return 'Hello \(person)! Glad you could visit from \(hometown)'&#13;
}&#13;
&#13;
print(greet(person: 'Bill'))&#13;
```&#13;
### [可变参数 (Variadic Parameters)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Variadic-Parameters)&#13;
&#13;
```swift&#13;
func arithmeticMean(_ numbers: Double...) -&gt; Double {&#13;
    var total: Double = 0&#13;
    for i in numbers {&#13;
        total += i&#13;
    }&#13;
    return total / Double(numbers.count)&#13;
}&#13;
&#13;
print(arithmeticMean(3, 8.25, 18.75))&#13;
```&#13;
### [引用参数 (In-Out Parameters)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#In-Out-Parameters)&#13;
&#13;
参数默认为常量值传递, 将其设置为 `inout` 就可以引用传递:&#13;
```swift&#13;
func swapTwoInts(_ a: inout Int, _ b: inout Int) {&#13;
    let temporaryA = a&#13;
    a = b&#13;
    b = temporaryA&#13;
}&#13;
&#13;
var a = 3&#13;
var b = 107&#13;
swapTwoInts(&amp;a, &amp;b)&#13;
&#13;
print(a,b)&#13;
```&#13;
此时参数传递要加上上 `&amp;`&#13;
&#13;
&gt; inout 参数没有默认值, 可变参数不能为 inout&#13;
## [函数类型 (Function Types)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Function-Types)&#13;
---&#13;
🕐 函数可作为一种类型:&#13;
```swift&#13;
func addTwoInts(_ a: Int, _ b: Int) -&gt; Int {&#13;
    return a + b&#13;
}&#13;
```&#13;
由入参类型和出参类型组成. 例如该函数的类型为 `(Int, Int) -&gt; Int`&#13;
&#13;
🕑 该函数的类型为 `() -&gt; Void`:&#13;
```swift&#13;
func printHelloWorld() {&#13;
    print('hello, world')&#13;
}&#13;
```&#13;
### [使用函数类型 (Using Function Types)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Using-Function-Types)&#13;
&#13;
```swift&#13;
var myFunc: (Int, Int) -&gt; Int = addTwoInts&#13;
print(myFunc(1, 2))&#13;
```&#13;
### [函数类型作为参数类型 (Function Types as Parameter Types)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Function-Types-as-Parameter-Types)&#13;
&#13;
```swift&#13;
func printResult(_ mathFunction: (Int, Int) -&gt; Int, _ a: Int, _ b: Int) {&#13;
    print('Result: \(mathFunction(a,b))')&#13;
}&#13;
printResult(addTwoInts, 3, 5)&#13;
```&#13;
### [参数类型作为返回类型 (Function Types as Return Types)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Function-Types-as-Return-Types)&#13;
&#13;
定义两个函数:&#13;
```swift&#13;
func add(_ input: Int) -&gt; Int {&#13;
    return input + 100&#13;
}&#13;
&#13;
func sub(_ input: Int) -&gt; Int {&#13;
    return input - 100&#13;
}&#13;
```&#13;
&#13;
使用该函数类型:&#13;
```swift&#13;
func chooseFunction(_ num: Int) -&gt; (Int) -&gt; Int {&#13;
    if num &lt; 100 {&#13;
        return add&#13;
    } else {&#13;
        return sub&#13;
    }&#13;
}&#13;
&#13;
let num = 999&#13;
let myFunc = chooseFunction(num)&#13;
print(myFunc(num))&#13;
```&#13;
## [嵌套函数 (Nested Functions)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions#Nested-Functions)&#13;
---&#13;
函数中嵌套函数:&#13;
```swift&#13;
func chooseFunction(_ num: Int) -&gt; (Int) -&gt; Int {&#13;
    func add(_ input: Int) -&gt; Int {&#13;
        return input + 100&#13;
    }&#13;
    &#13;
    func sub(_ input: Int) -&gt; Int {&#13;
        return input - 100&#13;
    }&#13;
    &#13;
    if num &lt; 100 {&#13;
        return add&#13;
    } else {&#13;
        return sub&#13;
    }&#13;
}&#13;
&#13;
let num = 999&#13;
let myFunc = chooseFunction(num)&#13;
print(myFunc(num))&#13;
```&#13;
&#13;
&#13;
&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/assets/GmeekTOC.js'&gt;&lt;/script&gt;'}## --&gt;。</description><guid isPermaLink="true">https://cell.237927.xyz/post/%5BSwift%20-guan-fang-jiao-cheng-%5D06%20-han-shu.html</guid><pubDate>Wed, 24 Jul 2024 09:17:44 +0000</pubDate></item><item><title>[Swift 官方教程]05 控制流</title><link>https://cell.237927.xyz/post/%5BSwift%20-guan-fang-jiao-cheng-%5D05%20-kong-zhi-liu.html</link><description>[Swift官方文档同步的中文快速入门教程](https://github.com/YugenFring/swift-tutorial-quickstart/wiki)&#13;
&#13;
建议: 重点在 Switch 及后面的部分&#13;
## [For-In 循环 (For-In Loops)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow#For-In-Loops)&#13;
---&#13;
🕐 数组:&#13;
```swift&#13;
let a = [1, 2, 3, 4, 5, 6]&#13;
for i in a {&#13;
    print(i)&#13;
}&#13;
```&#13;
&#13;
🕑 字典:&#13;
```swift&#13;
let d = ['a': 18, 'b': 20, 'c': 38]&#13;
for (k, v) in d {&#13;
    print(k, v)&#13;
}&#13;
```&#13;
&#13;
🕒 区间运算:&#13;
```swift&#13;
for i in 1...5 {&#13;
    print(i)&#13;
}&#13;
&#13;
for i in 1..&lt;5 {&#13;
    print(i)&#13;
}&#13;
```&#13;
&#13;
🕓 等差列:&#13;
```swift&#13;
for i in stride(from: 0, to: 20, by: 2) { //不含 20&#13;
    print(i)&#13;
}&#13;
&#13;
for i in stride(from: 0, through: 20, by: 2) { // 含 20&#13;
    print(i)&#13;
}&#13;
```&#13;
## [While 循环 (While Loops)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow#While-Loops)&#13;
---&#13;
有两种:&#13;
- `while`: 先判断再循环&#13;
- `repeat-while`: 先循环再判断&#13;
&#13;
```swift&#13;
var a = 0&#13;
let b = 10&#13;
```&#13;
### [While](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow#While)&#13;
```swift&#13;
while a &lt; b {&#13;
    print(a)&#13;
    a += 1&#13;
}&#13;
```&#13;
### [Repeat-While](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow#Repeat-While)&#13;
```swift&#13;
repeat {&#13;
    print(a)&#13;
    a += 1&#13;
} while a &lt; b&#13;
```&#13;
## [条件语句 (Conditional Statements)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow#Conditional-Statements)&#13;
---&#13;
### [If](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow#If)&#13;
```swift&#13;
let n = 95&#13;
&#13;
if n &lt; 80 {&#13;
    print('c')&#13;
} else if n &lt; 90 {&#13;
    print('b')&#13;
} else {&#13;
    print('a')&#13;
}&#13;
```&#13;
&#13;
🕐 用于赋值语句:&#13;
```swift&#13;
let n = 70&#13;
&#13;
let a: String? = if n &lt; 80 {&#13;
    'root'&#13;
} else {&#13;
    nil&#13;
}&#13;
```&#13;
&#13;
另一种等价形式 (因为用到了可选类型, 因而要提供类型信息):&#13;
```swift&#13;
let a = if n &lt; 80 {&#13;
    'root'&#13;
} else {&#13;
    nil as String?&#13;
}&#13;
```&#13;
&#13;
🕑 触发错误:&#13;
```swift&#13;
if ... {&#13;
    throw ...&#13;
} else {&#13;
}&#13;
```&#13;
### [Switch](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow#Switch)&#13;
&#13;
🕐 必须要考虑所有 case, 否则要提供 default:&#13;
```swift&#13;
let ch: Character = 'z'&#13;
&#13;
switch ch {&#13;
case 'a':&#13;
    print('case 1')&#13;
case 'z':&#13;
    print('case 2')&#13;
default:&#13;
    print('default')&#13;
}&#13;
```&#13;
&#13;
🕑 多 case 组合:&#13;
```swift&#13;
let ch: Character = 'z'&#13;
&#13;
switch ch {&#13;
case 'a','A':&#13;
    print('case 1')&#13;
case 'z':&#13;
    print('case 2')&#13;
default:&#13;
    print('default')&#13;
}&#13;
```&#13;
&#13;
🕒 用于赋值:&#13;
```swift&#13;
let ch: Character = 'z'&#13;
&#13;
let s = switch ch {&#13;
case 'a':&#13;
    'case 1'&#13;
case 'z':&#13;
    'case 2'&#13;
default:&#13;
    'default'&#13;
}&#13;
```&#13;
#### 自动向下匹配 [ (No Implicit Fallthrough)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow#No-Implicit-Fallthrough)&#13;
&#13;
只要匹配到 case 就停止继续向下匹配, 因而 `break` 不是必须的, 但还是可以使用&#13;
#### [区间匹配 (Interval Matching)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow#Interval-Matching)&#13;
&#13;
```swift&#13;
var num = 18&#13;
&#13;
switch num {&#13;
    case 0:&#13;
        print('0')&#13;
    case 1..&lt;5:&#13;
        print('&lt;5')&#13;
    case 5..&lt;10:&#13;
        print('&lt;10')&#13;
    default:&#13;
        print('default')&#13;
}&#13;
```&#13;
#### [元组匹配 (Tuples)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow#Tuples)&#13;
&#13;
```swift&#13;
let p = (1, 1)&#13;
&#13;
switch p {&#13;
case (0, 0):&#13;
    print('a')&#13;
case (_, 0):&#13;
    print('b')&#13;
case (0, _):&#13;
    print('c')&#13;
case (-2...2, -2...2):&#13;
    print('d')&#13;
default:&#13;
    print('default')&#13;
}&#13;
```&#13;
#### [值绑定 (Value Bindings)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow#Value-Bindings)&#13;
&#13;
```swift&#13;
let p = (2, 0)&#13;
&#13;
switch p {&#13;
case (let x, 0):&#13;
    print(x)&#13;
case (0, let y):&#13;
    print(y)&#13;
case let (x, y):&#13;
    print(x, y)&#13;
}&#13;
```&#13;
#### [Where](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow#Where)&#13;
&#13;
```swift&#13;
let p = (1, -1)&#13;
&#13;
switch p {&#13;
case let (x, y) where x == y:&#13;
    print('a')&#13;
case let (x, y) where x == -y:&#13;
    print('b')&#13;
case let (x, y):&#13;
    print(x,y)&#13;
}&#13;
```&#13;
#### [组合 case (Compound Cases)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow#Compound-Cases)&#13;
&#13;
🕐 非赋值情况:&#13;
```swift&#13;
let ch: Character = 'e'&#13;
&#13;
switch ch {&#13;
case 'a', 'e', 'i', 'o', 'u':&#13;
    print('a')&#13;
case 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',&#13;
    'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z':&#13;
    print('b')&#13;
default:&#13;
    print('default')&#13;
}&#13;
```&#13;
&#13;
🕑 赋值情况:&#13;
```swift&#13;
let p = (9, 0)&#13;
&#13;
switch p {&#13;
case (let n, 0), (0, let n):&#13;
    print(n)&#13;
default:&#13;
    print('default')&#13;
}&#13;
```&#13;
## [控制转移语句 (Control Transfer Statements)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow#Control-Transfer-Statements)&#13;
---&#13;
转移控制权&#13;
### [Continue](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow#Continue)&#13;
&#13;
```swift&#13;
for i in 1...5 {&#13;
    if i &lt; 3 {&#13;
        continue&#13;
    }&#13;
    print(i)&#13;
}&#13;
```&#13;
### [Break](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow/#Break)&#13;
#### [在循环中使用 (Break in a Loop Statement)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow/#Break-in-a-Loop-Statement)&#13;
&#13;
终止当前循环&#13;
#### [在 switch 中使用 break (Break in a Switch Statement)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow/#Break-in-a-Switch-Statement)&#13;
&#13;
常用来忽略某个 case 的执行&#13;
&#13;
```swift&#13;
var num = 18&#13;
&#13;
switch num {&#13;
    case 0:&#13;
        break&#13;
    case 1..&lt;5:&#13;
        print('&lt;5')&#13;
    case 5..&lt;10:&#13;
        print('&lt;10')&#13;
    default:&#13;
        break&#13;
}&#13;
```&#13;
### [自动向下匹配 (Fallthrough)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow/#Fallthrough)&#13;
&#13;
默认一旦 case 匹配就终止执行, 使用 `fallthrough` 自动向下匹配:&#13;
```swift&#13;
let num = 5&#13;
&#13;
switch num {&#13;
case 1, 3, 5:&#13;
    print('case a')&#13;
    fallthrough&#13;
case 99:&#13;
    print('case b')&#13;
default:&#13;
    print('error')&#13;
}&#13;
```&#13;
此时下一个 case 的条件将被忽略&#13;
### [带标签的语句 (Labeled Statements)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow/#Labeled-Statements)&#13;
&#13;
比如给循环语句指定标签, 从而精准控制:&#13;
```swift&#13;
let fruits = ['A', 'A', 'B', 'A', 'B', 'C', 'A']&#13;
var count = 0&#13;
&#13;
aLoop: while true {&#13;
    bLoop: for f in fruits {&#13;
        switch f {&#13;
            case 'A':&#13;
                count += 1&#13;
                print('So far, Found \(count) A ')&#13;
                continue bLoop&#13;
            case 'B':&#13;
                print('Found B')&#13;
            default:&#13;
                break&#13;
        }&#13;
        if f == 'C' {&#13;
            print('Got C, work done.')&#13;
            break aLoop&#13;
        }&#13;
    }&#13;
}&#13;
```&#13;
## [提前退出 (Early Exit)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow/#Early-Exit)&#13;
---&#13;
`guard` 中条件为真时往下执行, 否则执行 `else`, else 中必须做好控制转移:&#13;
```swift&#13;
func greet(person: [String: String]) {&#13;
    guard let name = person['name'] else {&#13;
        return&#13;
    }&#13;
&#13;
    print('Hello \(name)!') // 条件语句中的变量会保留&#13;
&#13;
    guard let location = person['location'] else {&#13;
        print('I hope the weather is nice near you.')&#13;
        return&#13;
    }&#13;
	&#13;
    print('I hope the weather is nice in \(location).')&#13;
}&#13;
&#13;
greet(person: ['name': 'John'])&#13;
greet(person: ['name': 'Jane', 'location': 'Cupertino'])&#13;
```&#13;
这里使用 `return` 提前终止函数的执行, 当然也可以用 `throw`&#13;
## [推迟行动 (Deferred Actions)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow/#Deferred-Actions)&#13;
---&#13;
在逻辑块退出之前, 按照逆序执行之前的所有被推迟的行动:&#13;
```swift&#13;
var score = 1&#13;
&#13;
if score &lt; 10 {&#13;
    defer {&#13;
        print(score)&#13;
    }&#13;
    defer {&#13;
        print('The score is:')&#13;
    }&#13;
    score += 5&#13;
}&#13;
```&#13;
实际上 `defer` 语句已经被计算了, 只是行动被推迟了&#13;
## [检查 API 可用性 (Checking API Availability)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow/#Checking-API-Availability)&#13;
---&#13;
即检查 API 的版本兼容性. 这里先了解就行, 日后用到再作深入了解&#13;
&#13;
🕐 用于条件语句:&#13;
```swift&#13;
if #available(iOS 10, macOS 10.12, *) {&#13;
    // Use iOS 10 APIs on iOS, and use macOS 10.12 APIs on macOS&#13;
} else {&#13;
    // Fall back to earlier iOS and macOS APIs&#13;
}&#13;
```&#13;
&#13;
🕑 用于类型:&#13;
```swift&#13;
@available(macOS 10.12, *)&#13;
struct ColorPreference {&#13;
    var bestColor = 'blue'&#13;
}&#13;
&#13;
&#13;
func chooseBestColor() -&gt; String {&#13;
    guard #available(macOS 10.12, *) else {&#13;
       return 'gray'&#13;
    }&#13;
    let colors = ColorPreference()&#13;
    return colors.bestColor&#13;
}&#13;
```&#13;
&#13;
🕒 使用 `unavailable` 判断不可用, 以下两种是等价的 &#13;
```swift&#13;
if #available(iOS 10, *) {&#13;
	...&#13;
} else {&#13;
    // Fallback code&#13;
}&#13;
```&#13;
等价于:&#13;
```swift&#13;
if #unavailable(iOS 10) {&#13;
    // Fallback code&#13;
}&#13;
```&#13;
&#13;
&#13;
&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/assets/GmeekTOC.js'&gt;&lt;/script&gt;'}## --&gt;。</description><guid isPermaLink="true">https://cell.237927.xyz/post/%5BSwift%20-guan-fang-jiao-cheng-%5D05%20-kong-zhi-liu.html</guid><pubDate>Wed, 24 Jul 2024 09:15:24 +0000</pubDate></item><item><title>[Swift 官方教程]04 集合类型</title><link>https://cell.237927.xyz/post/%5BSwift%20-guan-fang-jiao-cheng-%5D04%20-ji-he-lei-xing.html</link><description>[Swift官方文档同步的中文快速入门教程](https://github.com/YugenFring/swift-tutorial-quickstart/wiki)&#13;
&#13;
建议: 这部分没什么难点, 了解下各个类型的操作就行&#13;
## [集合的可变性 (Mutability of Collections)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Mutability-of-Collections)&#13;
---&#13;
是否可变取决于是 `var` 还是 `let`&#13;
## [数组 (Arrays)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Arrays)&#13;
---&#13;
同一类型值的顺序集合&#13;
### [数组类型简记法 (Array Type Shorthand Syntax)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Array-Type-Shorthand-Syntax)&#13;
&#13;
数组的完整写法为: `Array&lt;Element&gt;`, 但通常简写为: `[Element]`&#13;
### [创建空数组 (Creating an Empty Array)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Creating-an-Empty-Array)&#13;
&#13;
```swift&#13;
var a: [Int] = []&#13;
a.append(3)&#13;
a = []&#13;
```&#13;
### [创建有默认值的数组 (Creating an Array with a Default Value)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Creating-an-Array-with-a-Default-Value)&#13;
&#13;
具有 3 个相同值的数组:&#13;
```swift&#13;
var a = Array(repeating: 0.0, count: 3)&#13;
```&#13;
### [合并两个数组 (Creating an Array by Adding Two Arrays Together)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Creating-an-Array-by-Adding-Two-Arrays-Together)&#13;
&#13;
```swift&#13;
var a = Array(repeating: 0.0, count: 3)&#13;
var b = Array(repeating: 2.5, count: 4)&#13;
var c = a + b&#13;
```&#13;
### [通过数组字面量创建数组 (Creating an Array with an Array Literal)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Creating-an-Array-with-an-Array-Literal)&#13;
&#13;
```swift&#13;
var a: [String] = ['Eggs', 'Milk']&#13;
```&#13;
### [访问和修改数组 (Accessing and Modifying an Array)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Accessing-and-Modifying-an-Array)&#13;
&#13;
```swift&#13;
var a = [1, 2, 3, 4, 5]&#13;
```&#13;
&#13;
🕐 获取的元素个数:&#13;
```swift&#13;
a.count&#13;
```&#13;
&#13;
🕑 判断数组是否为空:&#13;
```swift&#13;
a.isEmpty&#13;
```&#13;
&#13;
🕒 在'数组'末尾添加元素:&#13;
```swift&#13;
a.append(6)&#13;
```&#13;
&#13;
🕓 通过索引获取和修改数组:&#13;
```swift&#13;
let e = array[0]&#13;
array[0] = 'root'&#13;
array[4...6] = ['a', 'b']&#13;
```&#13;
&#13;
🕔 插入或移除指定位置的元素:&#13;
```swift&#13;
a.insert(88, at: 0)&#13;
a.remove(at: 1)&#13;
```&#13;
&#13;
🕕 弹出最后一位元素:&#13;
```swift&#13;
let p = a.removeLast()&#13;
```&#13;
### [遍历数组 (Iterating Over an Array)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Iterating-Over-an-Array)&#13;
&#13;
🕐 遍历数组中的元素:&#13;
```swift&#13;
for v in array {&#13;
}&#13;
```&#13;
&#13;
🕑 遍历数组的索引和元素:&#13;
```swift&#13;
for (i, v) in array.enumerated() {&#13;
}&#13;
```&#13;
## [集合 (Sets)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Sets)&#13;
---&#13;
同一类型的唯一值的无序集合&#13;
### [集合的哈希值 (Hash Values for Set Types)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Hash-Values-for-Set-Types)&#13;
&#13;
集合类型必须是可哈希的, 因为要进行值比较&#13;
### [集合类型语法 (Set Type Syntax)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Set-Type-Syntax)&#13;
&#13;
集合类型写作: `Set&lt;Element&gt;`&#13;
### [创建和初始化空集合 (Creating and Initializing an Empty Set)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Creating-and-Initializing-an-Empty-Set)&#13;
&#13;
```swift&#13;
var s = Set&lt;Character&gt;()&#13;
s.insert('a')&#13;
s = []&#13;
```&#13;
### [通过数组字面量创建集合 (Creating a Set with an Array Literal)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Creating-a-Set-with-an-Array-Literal)&#13;
&#13;
```swift&#13;
var s: Set&lt;String&gt; = ['Rock', 'Classical', 'Hip hop']&#13;
```&#13;
&#13;
可以简写为:&#13;
```swift&#13;
var s: Set = ['Rock', 'Classical', 'Hip hop']&#13;
```&#13;
### [访问和修改集合 (Accessing and Modifying a Set)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Accessing-and-Modifying-a-Set)&#13;
&#13;
🕐 获取个数:&#13;
```swift&#13;
s.count&#13;
&#13;
```&#13;
&#13;
🕑 判断否为空:&#13;
```swift&#13;
s.isEmpty&#13;
```&#13;
&#13;
🕒 插入元素:&#13;
```swift&#13;
s.insert('a')&#13;
&#13;
```&#13;
&#13;
🕓 移除元素:&#13;
```swift&#13;
s.remove('a')&#13;
```&#13;
 &#13;
 🕓 是否包含某元素:&#13;
```&#13;
s.contains('a')&#13;
```&#13;
### [遍历集合 (Iterating Over a Set)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Iterating-Over-a-Set)&#13;
&#13;
🕐 遍历集合元素:&#13;
```swift&#13;
for i in s {&#13;
}&#13;
```&#13;
&#13;
🕑 排序后遍历:&#13;
```swift&#13;
for i in s.sorted() {&#13;
}&#13;
```&#13;
## [执行集合操作 (Performing Set Operations)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Performing-Set-Operations)&#13;
---&#13;
数学中的集合操作&#13;
### [基础集合操作 (Fundamental Set Operations)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Fundamental-Set-Operations)&#13;
&#13;
![[Pasted image 20240107203713.png|550]]&#13;
### [集合的成员资格和等价性 (Set Membership and Equality)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Set-Membership-and-Equality)&#13;
&#13;
```swift&#13;
let a: Set = ['🐶', '🐱']&#13;
let b: Set = ['🐮', '🐔', '🐑', '🐶', '🐱']&#13;
let c: Set = ['🐦', '🐭']&#13;
```&#13;
&#13;
🕐 判断集合是否相等:&#13;
```swift&#13;
a == b&#13;
```&#13;
&#13;
🕑 集合操作:&#13;
&#13;
```swift&#13;
a.isSubset(of: b) // 子集&#13;
a.isStrictSubset(of: b) // 严格子集&#13;
b.isSuperset(of: a) // 超集&#13;
b.isDisjoint(with: c) // 无交集&#13;
```&#13;
## [字典 (Dictionaries)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Dictionaries)&#13;
---&#13;
无序的, key 类型相同, value 类型相同&#13;
### [字典类型简记法 (Dictionary Type Shorthand Syntax)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Dictionary-Type-Shorthand-Syntax)&#13;
&#13;
字典定义为: `Dictionary&lt;Key, Value&gt;`, 可以简写为: `[Key: Value]`&#13;
### [创建空字典 (Creating an Empty Dictionary)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Creating-an-Empty-Dictionary)&#13;
&#13;
```swift&#13;
var d: [Int: String] = [:]&#13;
```&#13;
&#13;
🕐 赋值:&#13;
```swift&#13;
d[16] = 'sixteen'&#13;
```&#13;
### [通过字典字面量创建字典 (Creating a Dictionary with a Dictionary Literal)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Creating-a-Dictionary-with-a-Dictionary-Literal)&#13;
&#13;
```swift&#13;
var d: [String: Int] = ['a': 18, 'b': 28]&#13;
```&#13;
&#13;
🕐 可以简写为:&#13;
```swift&#13;
var d = ['a': 18, 'b': 28]&#13;
```&#13;
### [访问和修改字典 (Accessing and Modifying a Dictionary)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Accessing-and-Modifying-a-Dictionary)&#13;
&#13;
🕐 获取元素个数,&#13;
```swift&#13;
d.count&#13;
```&#13;
&#13;
🕑 判断是否为空:&#13;
 ```swift&#13;
d.isEmpty&#13;
```&#13;
&#13;
🕒 通过 key 添加或修改 value:&#13;
```swift&#13;
d['c'] = 19&#13;
```&#13;
&#13;
🕓 更新并返回旧 value (可选类型):&#13;
```swift&#13;
var d  = ['a': 18, 'b': 28]&#13;
if let v = d.updateValue(19, forKey: 'a') {&#13;
    print(v)&#13;
}&#13;
```&#13;
&#13;
🕔 获取 value (可选类型):&#13;
```swift&#13;
var d  = ['a': 18, 'b': 28]&#13;
if let v = d['b'] {&#13;
    print(v)&#13;
}&#13;
```&#13;
&#13;
🕕 通过赋值方式删除元素:&#13;
```swift&#13;
dict[key] = nil&#13;
```&#13;
&#13;
🕖 通过 key 删除并返回对应的 value (可选类型):&#13;
```swift&#13;
var d  = ['a': 18, 'b': 28]&#13;
if let v = d.removeValue(forKey: 'a') {&#13;
    print(v)&#13;
}&#13;
```&#13;
### [遍历字典 (Iterating Over a Dictionary)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes#Iterating-Over-a-Dictionary)&#13;
&#13;
🕐 遍历 key 和 value:&#13;
```swift&#13;
var d  = ['a': 18, 'b': 28]&#13;
for (k, v) in d {&#13;
}&#13;
```&#13;
&#13;
🕑 遍历 key :&#13;
```swift&#13;
for k in d.keys {&#13;
}&#13;
```&#13;
&#13;
🕒 遍历 value:&#13;
```swift&#13;
for v in d.values {&#13;
}&#13;
```&#13;
&#13;
🕓 将 key 或 value 转换为数组:&#13;
```swift&#13;
var d  = ['a': 18, 'b': 28]&#13;
let a = [String](d.keys)&#13;
let b = [Int](d.values)&#13;
```&#13;
&#13;
🕔 原地排序 key:&#13;
```swift&#13;
d.keys.sorted()&#13;
```&#13;
&#13;
🕕 原地排序 value:&#13;
```swift&#13;
d.values.sorted()&#13;
```&#13;
&#13;
&#13;
&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/assets/GmeekTOC.js'&gt;&lt;/script&gt;'}## --&gt;。</description><guid isPermaLink="true">https://cell.237927.xyz/post/%5BSwift%20-guan-fang-jiao-cheng-%5D04%20-ji-he-lei-xing.html</guid><pubDate>Wed, 24 Jul 2024 09:13:10 +0000</pubDate></item><item><title>[Swift 官方教程]03 字符串和字符</title><link>https://cell.237927.xyz/post/%5BSwift%20-guan-fang-jiao-cheng-%5D03%20-zi-fu-chuan-he-zi-fu.html</link><description>[Swift官方文档同步的中文快速入门教程](https://github.com/YugenFring/swift-tutorial-quickstart/wiki)&#13;
&#13;
建议: 重点理解一下字符串的底层表示, 相应部分从 **Unicode** 开始看起&#13;
## [字符串字面量 (String Literals)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#String-Literals)&#13;
---&#13;
```swift&#13;
let s = 'hello'&#13;
```&#13;
### [多行字符串字面量 (Multiline String Literals)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Multiline-String-Literals)&#13;
&#13;
🕐 多行字符串表示法, :&#13;
```swift&#13;
let s = '''&#13;
hear me now and bear witness to my vow&#13;
night gathers and now my watch begins&#13;
'''&#13;
```&#13;
&#13;
🕑 使用 `\` 在代码层面换行, 实际文字不换行:&#13;
```swift&#13;
let s = '''&#13;
hear me now and bear witness\&#13;
to my vow&#13;
night gathers and now my watch begins&#13;
'''&#13;
```&#13;
&#13;
🕒 首行缩进以末尾 `'''` 所在行的缩进为基准:&#13;
&#13;
![[Pasted image 20240107172813.png]]&#13;
### [特殊字符 (Special Characters in String Literals)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Special-Characters-in-String-Literals)&#13;
&#13;
转义字符有:&#13;
- `\0` (空字符), `\\` (反斜杠), `\t` (水平制表符), `\n` (换行), `\r` (回车), `\'` (双引号), `\'` (单引号)&#13;
- `\u{`_n_`}`, 其中 n 是 1-8 位的十六进制数, 即 Unicode 标量值&#13;
&#13;
```swift&#13;
let a = '\u{24}'        // $,  Unicode scalar U+0024&#13;
let b = '\u{2665}'      // ♥,  Unicode scalar U+2665&#13;
let c = '\u{1F496}' // 💖, Unicode scalar U+1F496&#13;
```&#13;
### [扩展的字符串界定符 (Extended String Delimiters)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Extended-String-Delimiters)&#13;
&#13;
通过在字符串外层使用 `#` (任意个数)达到在原生字符串的效果&#13;
&#13;
🕐 以下是等价的:&#13;
```swift&#13;
let s1 = #'Here are : \n'#&#13;
let s2 = ##'Here are : \n'##&#13;
let s3 = ###'Here are : \n'###&#13;
```&#13;
&#13;
🕑 在 `\` 后添加界定符以恢复特殊字符的效果:&#13;
```swift&#13;
let s1 = #'Here are : \#n'#&#13;
let s2 = ##'Here are : \##n'##&#13;
let s3 = ###'Here are : \##n'###&#13;
```&#13;
## [初始化空字符串 (Initializing an Empty String)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Initializing-an-Empty-String)&#13;
---&#13;
🕐 初始化空字符串:&#13;
```swift&#13;
var s1 = ''&#13;
var s2 = String() &#13;
```&#13;
&#13;
🕑 判断是否为空:&#13;
```swift&#13;
if s.isEmpty {&#13;
	...&#13;
}&#13;
```&#13;
## [字符串的可变性 (String Mutability)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#String-Mutability)&#13;
---&#13;
是否可变取决于是 `var` 还是 `let`&#13;
## [字符串是值类型 (Strings Are Value Types)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Strings-Are-Value-Types)&#13;
---&#13;
值类型意味着是值存储和传递, 而不是指针&#13;
## [使用字符 (Working with Characters)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Working-with-Characters)&#13;
---&#13;
🕐 字符串是字符数组:&#13;
```swift&#13;
for c in 'Dog!🐶' {&#13;
    print(c)&#13;
}&#13;
```&#13;
&#13;
🕑 定义字符:&#13;
```swift&#13;
let c: Character = '!'&#13;
```&#13;
&#13;
🕒 将字符数组转换为字符串:&#13;
```swift&#13;
let c: [Character] = ['C', 'a', 't', '!', '🐱']&#13;
let s = String(c)&#13;
```&#13;
## [拼接字符和字符串 (Concatenating Strings and Characters)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Concatenating-Strings-and-Characters)&#13;
---&#13;
🕐 拼接:&#13;
```swift&#13;
let a = 'hello'&#13;
let b = ' world'&#13;
let s = a + b&#13;
```&#13;
&#13;
🕑 复合拼接:&#13;
```swift&#13;
var s = 'hello'&#13;
s += ' world'&#13;
```&#13;
&#13;
🕒 末尾添加字符:&#13;
```swift&#13;
var s = 'hello'&#13;
s.append('!')&#13;
```&#13;
## [字符串插值 (String Interpolation)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#String-Interpolation)&#13;
---&#13;
🕐 使用 `\()` 在字符串中进行插值:&#13;
```swift&#13;
var a = 'root'&#13;
let b = 'hello \(a)'&#13;
```&#13;
&#13;
🕑 在扩展的字符串界定符中进行插值:&#13;
```swift&#13;
print(#'6 times 7 is \#(6 * 7).'#)&#13;
```&#13;
## [Unicode](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Unicode)&#13;
---&#13;
`String` 完全符合 *Unicode 标准*, 组成字符串的基本单位不再是'字符'&#13;
### [Unicode 标量值 (Unicode Scalar Values)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Unicode-Scalar-Values)&#13;
&#13;
`String` 由 *Unicode 标量值*组成&#13;
### [扩展字素簇 (Extended Grapheme Clusters)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Extended-Grapheme-Clusters)&#13;
&#13;
`Character` 表示一个单独的'扩展字素簇', 即可由多个 *Unicode 标量值*组成的序列&#13;
&#13;
🕐 如二者都表示 `é`:&#13;
```swift&#13;
let a: Character = '\u{E9}'&#13;
let b: Character = '\u{65}\u{301}' &#13;
print(a == b) // true&#13;
```&#13;
&#13;
🕑 扩展字素簇可通过组合或拆解的形式表示:&#13;
```swift&#13;
let a: Character = '\u{D55C}' // 한 &#13;
let b: Character = '\u{1112}\u{1161}\u{11AB}' // ᄒ, ᅡ, ᆫ&#13;
print(a == b) // true&#13;
```&#13;
&#13;
🕒 可以给 Unicode 标量进行字符修饰; 如给它添加某个符号:&#13;
```swift&#13;
let a: Character = '\u{E9}\u{20DD}'&#13;
```&#13;
但是其仍然被视为 `Character`&#13;
&#13;
🕔 组合地区指示符:&#13;
```swift&#13;
let a: Character = '\u{1F1FA}\u{1F1F8}'&#13;
print(a) // 🇺🇸&#13;
```&#13;
## [计算字符数量 (Counting Characters)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Counting-Characters)&#13;
---&#13;
```swift&#13;
var s = 'root'&#13;
print(s.count) // 4&#13;
```&#13;
&#13;
&gt; 计算字符数量需要遍历最底层 *Unicode 标量值*, 因而字符串越长性能也越差&#13;
## [访问和修改字符串 (Accessing and Modifying a String)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Accessing-and-Modifying-a-String)&#13;
---&#13;
### [字符串索引 (String Indices)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#String-Indices)&#13;
&#13;
每个字符串值都有其对应的索引类型 *String.Index* 来标识每个字符所在的位置, 由于字符串的特殊组成, 需要遍历 *Unicode 标量值*来决定每个字符的位置, 因而不能直接使用数值索引&#13;
&#13;
```swift&#13;
let s = 'abcdefg'&#13;
```&#13;
&#13;
🕐 获取首字符:&#13;
```swift&#13;
s[s.startIndex] // a&#13;
```&#13;
&#13;
🕑 获取指定字符前或后的字符:&#13;
```swift&#13;
s[s.index(before: s.endIndex)] // g&#13;
s[s.index(after: s.startIndex)] // b&#13;
```&#13;
其中 *endIndex* 指向最后一个字符的下一位置&#13;
&#13;
🕒 获取指定偏移位置的索引:&#13;
```swift&#13;
let index = s.index(s.startIndex, offsetBy: 3)&#13;
print(s[index]) // d&#13;
```&#13;
&#13;
🕓 通过索引遍历字符串:&#13;
```swift&#13;
for i in s.indices {&#13;
    print(s[i])&#13;
}&#13;
```&#13;
&#13;
&gt; 这种索引类型适用于任何遵循 *Collection* 协议的类型, 比如 *Array*, *Dictionary* 和 *Set*&#13;
### [插入和移除 (Inserting and Removing)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Inserting-and-Removing)&#13;
&#13;
```swift&#13;
var s = 'abcdefg'&#13;
```&#13;
&#13;
🕐 在指定索引处插入字符:&#13;
```swift&#13;
s.insert('h', at: s.endIndex)&#13;
```&#13;
&#13;
🕑 移除指定索引处的字符:&#13;
```swift&#13;
s.remove(at: s.index(before: s.endIndex))&#13;
```&#13;
&#13;
🕒 移除指定索引范围内的字符:&#13;
```swift&#13;
let range = s.index(s.endIndex, offsetBy: -2) ..&lt; s.endIndex&#13;
s.removeSubrange(range)&#13;
```&#13;
&#13;
&gt; 上述方法适用于任何遵循 *Collection* 协议的类型, 比如 *Array*, *Dictionary* 和 *Set*&#13;
## [子串 (Substrings)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Substrings)&#13;
---&#13;
子串是一个类型 `Substring`, 相当于是字符串的视图, 当你对子串进行修改时, 其会被转换为字符串&#13;
![[Pasted image 20240221154649.png|350]]&#13;
&#13;
🕐 通过索引获取子串:&#13;
```swift&#13;
var s = 'abc,def,g'&#13;
let index = s.firstIndex(of: ',') ?? s.endIndex&#13;
let a = s[..&lt;index]&#13;
```&#13;
&#13;
🕑 将字串转换为字符串:&#13;
```swift&#13;
let b = String(a)&#13;
```&#13;
## [字符串比较 (Comparing Strings)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Comparing-Strings)&#13;
---&#13;
🕐 比较字符串的值是否相等:&#13;
```swift&#13;
let a = 'I'm root'&#13;
let b = 'I'm root'&#13;
if a == b {&#13;
    print('equal')&#13;
}&#13;
```&#13;
&#13;
🕑 需要注意扩展字素簇的情况:&#13;
```swift&#13;
let a = 'Voulez-vous un caf\u{E9}?'&#13;
let b = 'Voulez-vous un caf\u{65}\u{301}?'&#13;
if a == b {&#13;
    print('equal')&#13;
}&#13;
```&#13;
因为 *\\\u{65}\\\u{301}* 为 *\\\u{E9}* 的扩展表示&#13;
### [前缀与后缀 (Prefix and Suffix Equality)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Prefix-and-Suffix-Equality)&#13;
&#13;
```swift&#13;
let list = [&#13;
    'Act 1 Scene 1: Verona, A public place',&#13;
    'Act 1 Scene 2: Capulet's mansion',&#13;
    'Act 1 Scene 3: A room in Capulet's mansion',&#13;
    'Act 1 Scene 4: A street outside Capulet's mansion',&#13;
    'Act 1 Scene 5: The Great Hall in Capulet's mansion',&#13;
    'Act 2 Scene 1: Outside Capulet's mansion',&#13;
    'Act 2 Scene 2: Capulet's orchard',&#13;
    'Act 2 Scene 3: Outside Friar Lawrence's cell',&#13;
    'Act 2 Scene 4: A street in Verona',&#13;
    'Act 2 Scene 5: Capulet's mansion',&#13;
    'Act 2 Scene 6: Friar Lawrence's cell'&#13;
]&#13;
```&#13;
&#13;
判断 `String` 是否拥有指定的前缀或后缀:&#13;
```swift&#13;
for i in list {&#13;
    if i.hasPrefix('Act 1') { // 是否拥有前缀&#13;
        print('prefix')&#13;
    }&#13;
    &#13;
    if i.hasSuffix('cell') { // 是否拥有后缀&#13;
        print('suffix')&#13;
    }&#13;
}&#13;
```&#13;
## [字符串的 Unicode 表示形式 (Unicode Representations of Strings)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Unicode-Representations-of-Strings)&#13;
---&#13;
获取 `String` 的不同表示方式&#13;
&#13;
```swift&#13;
let dogString = 'Dog‼🐶'&#13;
```&#13;
### [UTF-8 形式 (UTF-8 Representation)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#UTF-8-Representation)&#13;
![[Pasted image 20240226165335.png]]&#13;
```swift&#13;
for codeUnit in dogString.utf8 {&#13;
    print('\(codeUnit) ', terminator: '')&#13;
}&#13;
// 68 111 103 226 128 188 240 159 144 182&#13;
```&#13;
### [UTF-16 形式 (UTF-16 Representation)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#UTF-16-Representation)&#13;
![[Pasted image 20240226165345.png|550]]&#13;
```swift&#13;
for codeUnit in dogString.utf16 {&#13;
    print('\(codeUnit) ', terminator: '')&#13;
}&#13;
// 68 111 103 8252 55357 56374 &#13;
```&#13;
### [Unicode 标量值形式 (Unicode Scalar Representation)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters#Unicode-Scalar-Representation)&#13;
![[Pasted image 20240226165504.png|500]]&#13;
```swift&#13;
for scalar in dogString.unicodeScalars {&#13;
    print('\(scalar.value) ', terminator: '')&#13;
}&#13;
// 68 111 103 8252 128054 &#13;
```&#13;
&#13;
🕐 可以直接将该标量值转换为 `String`:&#13;
```swift&#13;
for scalar in dogString.unicodeScalars {&#13;
    print('\(scalar) ')&#13;
}&#13;
// D&#13;
// o&#13;
// g&#13;
// ‼&#13;
// 🐶&#13;
```&#13;
&#13;
&#13;
&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/assets/GmeekTOC.js'&gt;&lt;/script&gt;'}## --&gt;。</description><guid isPermaLink="true">https://cell.237927.xyz/post/%5BSwift%20-guan-fang-jiao-cheng-%5D03%20-zi-fu-chuan-he-zi-fu.html</guid><pubDate>Wed, 24 Jul 2024 09:12:18 +0000</pubDate></item><item><title>[Swift 官方教程]02 基础运算符</title><link>https://cell.237927.xyz/post/%5BSwift%20-guan-fang-jiao-cheng-%5D02%20-ji-chu-yun-suan-fu.html</link><description>[Swift官方文档同步的中文快速入门教程](https://github.com/YugenFring/swift-tutorial-quickstart/wiki)&#13;
&#13;
建议: 这部分理解看得懂就可以了, 不用作额外的练习&#13;
## [术语 (Terminology)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Terminology)&#13;
---&#13;
学一下英语:&#13;
- _Unary_: 一元&#13;
- _Binary_: 二元&#13;
- _Ternary_: 三元&#13;
## [算术运算符 (Arithmetic Operators)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Arithmetic-Operators)&#13;
---&#13;
🕐 加减乘除:&#13;
```swift&#13;
1 + 2&#13;
5 - 3&#13;
2 * 3&#13;
10.0 / 2.5 &#13;
```&#13;
&#13;
🕑 字符串拼接:&#13;
```swift&#13;
'hello, ' + 'world'&#13;
```&#13;
### [取余运算符 (Remainder Operator)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Remainder-Operator)&#13;
&#13;
符号跟着被除数走:&#13;
```swift&#13;
9 % 4    // 1&#13;
-9 % 4   // -1&#13;
```&#13;
### [一元负号操作符 (Unary Minus Operator)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Unary-Minus-Operator)&#13;
&#13;
```swift&#13;
let x = 3&#13;
let y = -x&#13;
let z = -y&#13;
```&#13;
### [一元正号运算符 (Unary Plus Operator)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Unary-Plus-Operator)&#13;
&#13;
```swift&#13;
let n = +3&#13;
```&#13;
&#13;
&gt; 实际不会发生任何影响&#13;
## [复合赋值运算符 (Compound Assignment Operators)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Compound-Assignment-Operators)&#13;
---&#13;
举个例子:&#13;
```swift&#13;
var n = 1&#13;
n += 2&#13;
```&#13;
## [比较运算符 (Comparison Operators)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Comparison-Operators)&#13;
---&#13;
🕐 举个例子:&#13;
```swift&#13;
1 == 1&#13;
2 != 1&#13;
2 &gt; 1&#13;
1 &lt; 2&#13;
1 &gt;= 1&#13;
2 &lt;= 1&#13;
```&#13;
&#13;
🕑 元组会逐个元素进行比较:&#13;
```swift&#13;
(1, 'a') &lt; (2, 'c')&#13;
```&#13;
## [三元条件运算符 (Ternary Conditional Operator)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Ternary-Conditional-Operator)&#13;
---&#13;
```swift&#13;
let x = 2&#13;
let b = true&#13;
let y = x + (b ? 10: 20)&#13;
```&#13;
## [空值合并运算符 (Nil-Coalescing Operator)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Nil-Coalescing-Operator)&#13;
---&#13;
即 `??`: [[01 基础部分 (The Basics)#[提供备选值 (Providing a Fallback Value)](https //docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics Providing-a-Fallback-Value)|here]]&#13;
```swift&#13;
let n = 'root'&#13;
var s: String?&#13;
let m = s ?? n&#13;
```&#13;
## [区间运算符 (Range Operators)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Range-Operators)&#13;
---&#13;
获取区间内的离散数值&#13;
### [闭区间运算符 (Closed Range Operator)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Closed-Range-Operator)&#13;
&#13;
左闭右闭:&#13;
```swift&#13;
for i in 1...5 {&#13;
    print(i)&#13;
}&#13;
```&#13;
### [半开区间运算符 (Half-Open Range Operator)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Half-Open-Range-Operator)&#13;
&#13;
左闭右开:&#13;
```swift&#13;
for i in 1..&lt;5 {&#13;
    print(i)&#13;
}&#13;
```&#13;
### [单侧区间 (One-Sided Ranges)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#One-Sided-Ranges)&#13;
&#13;
🕐 右穷尽:&#13;
```swift&#13;
let m = ['a', 'b', 'c', 'd']&#13;
for i in m[2...] {&#13;
    print(i)&#13;
}&#13;
```&#13;
&#13;
🕑 左穷尽:&#13;
```swift&#13;
let m = ['a', 'b', 'c', 'd']&#13;
for i in m[...2] {&#13;
    print(i)&#13;
}&#13;
```&#13;
&#13;
🕒 左穷尽右开:&#13;
```swift&#13;
let m = ['a', 'b', 'c', 'd']&#13;
for i in m[..&lt;2] {&#13;
    print(i)&#13;
}&#13;
```&#13;
&#13;
🕓 判断数字是否在区间中:&#13;
```swift&#13;
let range = ...5&#13;
print(range.contains(7))&#13;
```&#13;
## [逻辑运算符 (Logical Operators)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Logical-Operators)&#13;
---&#13;
### [非运算符 (Logical NOT Operator)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Logical-NOT-Operator)&#13;
&#13;
```swift&#13;
let f = false&#13;
if !f {&#13;
    print('true')&#13;
}&#13;
```&#13;
### [并且运算符 (Logical AND Operator)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Logical-AND-Operator)&#13;
&#13;
```swift&#13;
let t = true&#13;
let f = false&#13;
if t &amp;&amp; f {&#13;
    print('true')&#13;
} else {&#13;
    print('false')&#13;
}&#13;
```&#13;
### [或运算符 (Logical OR Operator)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Logical-OR-Operator)&#13;
&#13;
```swift&#13;
let t = true&#13;
let f = false&#13;
if t || f {&#13;
    print('true')&#13;
} else {&#13;
    print('false')&#13;
}&#13;
```&#13;
### [组合逻辑运算符 (Combining Logical Operators)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Combining-Logical-Operators)&#13;
&#13;
上述逻辑运算符可以组合使用&#13;
### [显式使用括号 (Explicit Parentheses)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Explicit-Parentheses)&#13;
&#13;
可以使用 `()` 改变优先级或者语法美观&#13;
&#13;
&#13;
&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/assets/GmeekTOC.js'&gt;&lt;/script&gt;'}## --&gt;。</description><guid isPermaLink="true">https://cell.237927.xyz/post/%5BSwift%20-guan-fang-jiao-cheng-%5D02%20-ji-chu-yun-suan-fu.html</guid><pubDate>Wed, 24 Jul 2024 09:10:59 +0000</pubDate></item><item><title>[Swift 官方教程]01 基础部分</title><link>https://cell.237927.xyz/post/%5BSwift%20-guan-fang-jiao-cheng-%5D01%20-ji-chu-bu-fen.html</link><description>[Swift官方文档同步的中文快速入门教程](https://github.com/YugenFring/swift-tutorial-quickstart/wiki)&#13;
&#13;
建议: 这部分理解看得懂就可以了, 不用作额外的练习&#13;
## [常量与变量 (Constants and Variables)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Constants-and-Variables)&#13;
---&#13;
🕐 先赋类型再赋值:&#13;
```swift&#13;
var user: String&#13;
user = 'root'&#13;
```&#13;
&#13;
🕑 赋值时自动推断类型:&#13;
```swift&#13;
let user = 'root'&#13;
var passwd = 123456&#13;
```&#13;
&#13;
&gt; 在实践中, 更多使用的是这种方式&#13;
&#13;
🕒 同时操作多个量:&#13;
```swift&#13;
var x = 0.0, y = 0.1, z = 0.2&#13;
var m, n: Double&#13;
```&#13;
## [注释 (Comments)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Comments)&#13;
---&#13;
🕐 单行注释:&#13;
```swift&#13;
// This is a comment&#13;
```&#13;
&#13;
🕑 多行注释:&#13;
```swift&#13;
/* This is also a comment&#13;
but is written over multiple lines. */&#13;
```&#13;
&#13;
🕒 多级注释 (可进行展开或折叠):&#13;
```&#13;
/* This is the start of the first multiline comment.&#13;
    /* This is the second, nested multiline comment. */&#13;
This is the end of the first multiline comment. */&#13;
```&#13;
## [分号 (Semicolons)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Semicolons)&#13;
---&#13;
不作强制要求, 但也可使用:&#13;
```swift&#13;
let name = 'root'; print(name)&#13;
```&#13;
## [整数 (Integers)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Integers)&#13;
---&#13;
一般整数使用 `Int` 即可, 如果要使用指定位数的也有&#13;
### [整数范围 (Integer Bounds)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Integer-Bounds)&#13;
&#13;
获取类型的最值:&#13;
```swift&#13;
let minValue = UInt8.min&#13;
let maxValue = UInt8.maxv&#13;
```&#13;
### [Int](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Int)&#13;
&#13;
类型 `Int` 的位数根据平台而定&#13;
### [UInt](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#UInt)&#13;
&#13;
类型 `UInt` 的位数根据平台而定&#13;
## [浮点数 (Floating-Point Numbers)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Floating-Point-Numbers)&#13;
---&#13;
- `Double` : 64-bit (至少表示 15 位小数)&#13;
- `Float` : 32-bit (差不多表示 6 位小数)&#13;
## [类型安全与类型推断 (Type Safety and Type Inference)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Type-Safety-and-Type-Inference)&#13;
---&#13;
- 类型安全: 自动检查类型是否匹配&#13;
- 类型推断: 根据值自动推断合适的类型&#13;
## [数值字面量 (Numeric Literals)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Numeric-Literals)&#13;
---&#13;
🕐 不同进制表示法:&#13;
```swift&#13;
let decimalInteger = 17&#13;
let binaryInteger = 0b10001 // 二进制&#13;
let octalInteger = 0o21 // 八进制&#13;
let hexadecimalInteger = 0x11 // 十六进制&#13;
```&#13;
&#13;
🕑 不同进制的指数表示法:&#13;
```swift&#13;
let decimalDouble = 12.1875&#13;
let exponentDouble = 1.21875e1&#13;
let hexadecimalDouble = 0xC.3p0 // 只支持十六进制&#13;
```&#13;
&#13;
🕒 填充及下划线分隔表示法:&#13;
```swift&#13;
let paddedDouble = 000123.456&#13;
let oneMillion = 1_000_000&#13;
let justOverOneMillion = 1_000_000.000_000_1&#13;
```&#13;
## [数值类型转换 (Numeric Type Conversion)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Numeric-Type-Conversion)&#13;
---&#13;
🕐 赋值不在数值类型范围内的值将会报错&#13;
&#13;
🕑 不同数值类型间不能直接操作,需显式进行类型转换:&#13;
```swift&#13;
let x: UInt16 = 2_000&#13;
let y: UInt8 = 1&#13;
let z = x + UInt16(y)&#13;
```&#13;
## [类型别名 (Type Aliases)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Type-Aliases)&#13;
---&#13;
给类型取一个别名:&#13;
```swift&#13;
typealias MyType = UInt16&#13;
var n = MyType.min&#13;
```&#13;
## [布尔值 (Booleans)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Booleans)&#13;
---&#13;
🕐 赋值:&#13;
```swift&#13;
let t = true&#13;
let f = false&#13;
```&#13;
&#13;
🕑 不是非 0 就是 true, 布尔就是布尔:&#13;
```swift&#13;
let n = 1&#13;
if n {&#13;
    // error&#13;
}&#13;
```&#13;
&#13;
&gt; 这是与其他语言较为不同的地方&#13;
## [元组 (Tuples)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Tuples)&#13;
---&#13;
🕐 元组定义与赋值:&#13;
```swift&#13;
let info = ('root', 123456)&#13;
let (user, passwd) = info&#13;
```&#13;
&#13;
🕑 赋值时使用下划线忽略:&#13;
```swift&#13;
let (user1, _) = info&#13;
```&#13;
### 索引 (Index)&#13;
&#13;
&gt; 这是比较新颖的地方, 某种程度上看起来像是 python 的字典&#13;
&#13;
🕐 通过数值索引获取元素:&#13;
```swift&#13;
print(info.0, info.1)&#13;
```&#13;
&#13;
🕑 通过名称获取元素:&#13;
```swift&#13;
let info = (user: 'root', passwd: 123456)&#13;
print(info.user, info.passwd)&#13;
```&#13;
## [可选类型 (Optionals)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Optionals)&#13;
---&#13;
🕐 定义方式: 在类型后加上 `?`&#13;
&#13;
🕑 可选类型要么有值要么为 `nil`:&#13;
```swift&#13;
var n: Int? = 404&#13;
n = nil // 可选类型可赋值 nil&#13;
```&#13;
&#13;
&gt; Swift 是非空类型的安全系统, 其要求每个量的类型都是明确的, 因此直接给量赋 `nil` 是不安全的. 推荐在可能出现 `nil` 的地方都使用可选类型, 可以把可选类型理解为一个安全的包装器&#13;
### [可选类型绑定 (Optional Binding)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Optional-Binding)&#13;
&#13;
即在条件表达式中使用赋值语句提取可选类型中的值&#13;
&#13;
🕐 当有值时, 条件表达式为 `true`, 同时提取值:&#13;
```swift&#13;
if let n = Int('123') { // 类型转换会返回可选值&#13;
    print('The number is \(n)')&#13;
} else {&#13;
    print('error')&#13;
}&#13;
```&#13;
&#13;
🕑 当条件表达式中的局部变量名与外层相同时可简写:&#13;
```swift&#13;
let n = Int('123')&#13;
if let n {&#13;
    print('My number is \(n)')&#13;
}&#13;
```&#13;
&#13;
🕒 同时进行多个可选类型绑定:&#13;
```swift&#13;
if let a = Int('4'), let b = Int('42'), a &lt; b &amp;&amp; b &lt; 100 {&#13;
    print('\(a) &lt; \(b) &lt; 100')&#13;
}&#13;
```&#13;
&#13;
&gt; 到这里可以将'可选类型绑定'理解为: 在条件语句中赋值可选类型, 就好像是使用普通类型一样&#13;
### [提供备选值 (Providing a Fallback Value)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Providing-a-Fallback-Value)&#13;
&#13;
使用 `??` 解包可选类型, 当其为 `nil` 时提供备选值:&#13;
```swift&#13;
let name: String? = nil&#13;
let greeting = 'Hello, ' + (name ?? 'root') + '!'&#13;
print(greeting)&#13;
```&#13;
### [强制解包 (Force Unwrapping)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Force-Unwrapping)&#13;
&#13;
使用 `!` 解包可选值, 若为 `nil` 将触发错误:&#13;
```swift&#13;
let s = '123s'&#13;
let i = Int(s)&#13;
let n = i!&#13;
```&#13;
### [隐式解包 (Implicitly Unwrapped Optionals)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Implicitly-Unwrapped-Optionals)&#13;
&#13;
适用于'当可选值有值后就一定保持有值'的情况&#13;
&#13;
🕐 定义方式: 类型后加上 `!`, 相当于可隐式解包的可选类型&#13;
&#13;
🕑 比可选类型多了自动隐式解包功能:&#13;
```swift&#13;
let user: String! = 'root'&#13;
let name: String = user&#13;
```&#13;
## [错误处理 (Error Handling)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics/#Error-Handling)&#13;
---&#13;
🕐 使用 `throws` 表明一个函数会抛出错误:&#13;
```swift&#13;
func f() throws {&#13;
	...&#13;
}&#13;
```&#13;
&#13;
🕑 处理错误的语句:&#13;
```swift&#13;
do {&#13;
	try f()&#13;
} catch {&#13;
	...&#13;
} catch {&#13;
	... &#13;
}&#13;
```&#13;
`try` 表明该函数可能会抛出错误, `catch` 用于捕获错误&#13;
## [断言和前置条件 (Assertions and Preconditions)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics/#Assertions-and-Preconditions)&#13;
---&#13;
'断言'和'前置条件'都是用于捕获意外的错误, 当不满足时中断程序执行; 前者只在开发环境中生效&#13;
&#13;
&gt; 与'错误处理'不同的是, 错误处理处理的是可预见的错误, 而这里的错误是意外的, 不可预知的, 因而不一定能够复现&#13;
### [使用断言 Debug (Debugging with Assertions)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics/#Debugging-with-Assertions)&#13;
&#13;
```swift&#13;
let n = -3&#13;
assert(n &gt;= 0, 'this is an error description') // 描述可省略&#13;
```&#13;
&#13;
手动触发断言错误:&#13;
```swift&#13;
let n = -3&#13;
if n &gt; 0 {&#13;
    assertionFailure('error')&#13;
} else {&#13;
    print('pass')&#13;
}&#13;
```&#13;
### [执行前置条件 (Enforcing Preconditions)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics/#Enforcing-Preconditions)&#13;
&#13;
```swift&#13;
let n = -3&#13;
precondition(n &gt; 0, 'this is an error descriptoin')&#13;
```&#13;
&#13;
手动触发前置条件错误:&#13;
```swift&#13;
let n = -3&#13;
if n &gt; 0 {&#13;
    preconditionFailure('error')&#13;
} else {&#13;
    print('pass')&#13;
}&#13;
```&#13;
&#13;
&gt; 关于这部分的使用还可以更进一步, 不过目前了解一下就足够了&#13;
&#13;
&#13;
&#13;
&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/assets/GmeekTOC.js'&gt;&lt;/script&gt;'}## --&gt;。</description><guid isPermaLink="true">https://cell.237927.xyz/post/%5BSwift%20-guan-fang-jiao-cheng-%5D01%20-ji-chu-bu-fen.html</guid><pubDate>Wed, 24 Jul 2024 08:48:30 +0000</pubDate></item><item><title>直接从Obsidian发布文章</title><link>https://cell.237927.xyz/post/zhi-jie-cong-Obsidian-fa-bu-wen-zhang.html</link><description>使用插件：[obsidian-github-issues](https://github.com/frostplexx/obsidian-github-issues)

这个插件可以在Ob中提交issues，并设置labels，这样就完美符合了Gmeek的发布文章需求。</description><guid isPermaLink="true">https://cell.237927.xyz/post/zhi-jie-cong-Obsidian-fa-bu-wen-zhang.html</guid><pubDate>Mon, 15 Jul 2024 09:02:22 +0000</pubDate></item><item><title>[转载]Swift入门教程</title><link>https://cell.237927.xyz/post/%5B-zhuan-zai-%5DSwift-ru-men-jiao-cheng.html</link><description>&gt; 原文地址 ['一篇入门swift的学习笔记' by __MrCool](https://blog.csdn.net/Void_leng/article/details/114254504#24__171)&#13;
&#13;
&lt;!-- ### 文章目录&#13;
&#13;
*   *   *   [1. 读后概述](#1)&#13;
        *   [2. 语法笔记](#2)&#13;
        *   *   [2.1 说明](#2.1)&#13;
            *   [2.2 基础类型](#2.2)&#13;
            *   [2.3 运算符](#2.3)&#13;
            *   [2.4 字符与字符串](#2.4)&#13;
            *   [2.5 控制流](#2.5)&#13;
            *   [2.6 函数](#2.6)&#13;
            *   [2.7 闭包](#2.7)&#13;
            *   [2.8 枚举、结构体、类](#2.8)&#13;
            *   [2.9 类的构造与析构](#2.9)&#13;
            *   [2.10 属性监听器](#2.10)&#13;
            *   [2.11 类的继承](#2.11)&#13;
            *   [2.12 扩展](#2.12)&#13;
            *   [2.13 协议](#2.13)&#13;
            *   [2.14 泛型](#2.14)&#13;
        *   [3. 总结](#3)&#13;
--&gt;&#13;
&lt;a a='1'&gt;&lt;/span&gt;&#13;
## 1. 读后概述&#13;
&#13;
阅读完[《the swift programming language 中文版》](https://swiftgg.gitbook.io/swift/)，对 swift 语言有了初步的认识。</description><guid isPermaLink="true">https://cell.237927.xyz/post/%5B-zhuan-zai-%5DSwift-ru-men-jiao-cheng.html</guid><pubDate>Sat, 13 Jul 2024 14:35:31 +0000</pubDate></item><item><title>Andy留给Red的信</title><link>https://cell.237927.xyz/post/Andy-liu-gei-Red-de-xin.html</link><description>Dear Red,&#13;
&#13;
If you're reading this, you've gotten out. And if you've come this far, maybe you're willing to come a little further. You remember the name of the town, don't you? I could use a good man to help me get my project on wheels. I'll keep an eye out for you and the chessboard ready.&#13;
&#13;
Remember, Red. Hope is a good thing, maybe the best of things, and no good thing ever dies. I will be hoping that this letter finds you, and finds you well.&#13;
&#13;
Your friend,&#13;
&#13;
Andy。</description><guid isPermaLink="true">https://cell.237927.xyz/post/Andy-liu-gei-Red-de-xin.html</guid><pubDate>Fri, 05 Jul 2024 16:33:53 +0000</pubDate></item><item><title>常用站点收藏</title><link>https://cell.237927.xyz/post/chang-yong-zhan-dian-shou-cang.html</link><description>---&#13;
## **云盘搜索**&#13;
https://www.yunpan1.cc/&#13;
https://pan666.net/&#13;
https://www.wpzysq.com/&#13;
&#13;
---&#13;
## **影视合集**&#13;
[电视剧.韩剧.韩语中字](https://www.aliyundrive.com/s/JHpBvN6QUac)&#13;
[合集贴](https://slowread.net/ali110.html)&#13;
&#13;
---&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://cell.237927.xyz/post/chang-yong-zhan-dian-shou-cang.html</guid><pubDate>Sun, 07 Apr 2024 08:14:05 +0000</pubDate></item><item><title>简易的小站</title><link>https://cell.237927.xyz/post/jian-yi-de-xiao-zhan.html</link><description>在这里记录下今后的日子，过去的已经过去，希望会带着我走向明天。</description><guid isPermaLink="true">https://cell.237927.xyz/post/jian-yi-de-xiao-zhan.html</guid><pubDate>Sun, 07 Apr 2024 07:23:26 +0000</pubDate></item><item><title>关于本站</title><link>https://cell.237927.xyz/about.html</link><description>如您所见，这是一个关于肖申克的救赎的小站。</description><guid isPermaLink="true">https://cell.237927.xyz/about.html</guid><pubDate>Sat, 06 Jul 2024 05:58:55 +0000</pubDate></item></channel></rss>