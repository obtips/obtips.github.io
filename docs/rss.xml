<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>237号房间</title><link>https://cell.237927.xyz</link><description>希望，或许是最好的东西。</description><copyright>237号房间</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://cell.237927.xyz/avatar.svg</url><title>avatar</title><link>https://cell.237927.xyz</link></image><lastBuildDate>Wed, 24 Jul 2024 09:03:43 +0000</lastBuildDate><managingEditor>237号房间</managingEditor><ttl>60</ttl><webMaster>237号房间</webMaster><item><title>[Swift 官方教程]01 基础部分</title><link>https://cell.237927.xyz/post/%5BSwift%20-guan-fang-jiao-cheng-%5D01%20-ji-chu-bu-fen.html</link><description>[Swift官方文档同步的中文快速入门教程](https://github.com/YugenFring/swift-tutorial-quickstart/wiki)&#13;
&#13;
建议: 这部分理解看得懂就可以了, 不用作额外的练习&#13;
## [常量与变量 (Constants and Variables)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Constants-and-Variables)&#13;
---&#13;
🕐 先赋类型再赋值:&#13;
```swift&#13;
var user: String&#13;
user = 'root'&#13;
```&#13;
&#13;
🕑 赋值时自动推断类型:&#13;
```swift&#13;
let user = 'root'&#13;
var passwd = 123456&#13;
```&#13;
&#13;
&gt; 在实践中, 更多使用的是这种方式&#13;
&#13;
🕒 同时操作多个量:&#13;
```swift&#13;
var x = 0.0, y = 0.1, z = 0.2&#13;
var m, n: Double&#13;
```&#13;
## [注释 (Comments)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Comments)&#13;
---&#13;
🕐 单行注释:&#13;
```swift&#13;
// This is a comment&#13;
```&#13;
&#13;
🕑 多行注释:&#13;
```swift&#13;
/* This is also a comment&#13;
but is written over multiple lines. */&#13;
```&#13;
&#13;
🕒 多级注释 (可进行展开或折叠):&#13;
```&#13;
/* This is the start of the first multiline comment.&#13;
    /* This is the second, nested multiline comment. */&#13;
This is the end of the first multiline comment. */&#13;
```&#13;
## [分号 (Semicolons)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Semicolons)&#13;
---&#13;
不作强制要求, 但也可使用:&#13;
```swift&#13;
let name = 'root'; print(name)&#13;
```&#13;
## [整数 (Integers)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Integers)&#13;
---&#13;
一般整数使用 `Int` 即可, 如果要使用指定位数的也有&#13;
### [整数范围 (Integer Bounds)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Integer-Bounds)&#13;
&#13;
获取类型的最值:&#13;
```swift&#13;
let minValue = UInt8.min&#13;
let maxValue = UInt8.maxv&#13;
```&#13;
### [Int](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Int)&#13;
&#13;
类型 `Int` 的位数根据平台而定&#13;
### [UInt](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#UInt)&#13;
&#13;
类型 `UInt` 的位数根据平台而定&#13;
## [浮点数 (Floating-Point Numbers)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Floating-Point-Numbers)&#13;
---&#13;
- `Double` : 64-bit (至少表示 15 位小数)&#13;
- `Float` : 32-bit (差不多表示 6 位小数)&#13;
## [类型安全与类型推断 (Type Safety and Type Inference)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Type-Safety-and-Type-Inference)&#13;
---&#13;
- 类型安全: 自动检查类型是否匹配&#13;
- 类型推断: 根据值自动推断合适的类型&#13;
## [数值字面量 (Numeric Literals)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Numeric-Literals)&#13;
---&#13;
🕐 不同进制表示法:&#13;
```swift&#13;
let decimalInteger = 17&#13;
let binaryInteger = 0b10001 // 二进制&#13;
let octalInteger = 0o21 // 八进制&#13;
let hexadecimalInteger = 0x11 // 十六进制&#13;
```&#13;
&#13;
🕑 不同进制的指数表示法:&#13;
```swift&#13;
let decimalDouble = 12.1875&#13;
let exponentDouble = 1.21875e1&#13;
let hexadecimalDouble = 0xC.3p0 // 只支持十六进制&#13;
```&#13;
&#13;
🕒 填充及下划线分隔表示法:&#13;
```swift&#13;
let paddedDouble = 000123.456&#13;
let oneMillion = 1_000_000&#13;
let justOverOneMillion = 1_000_000.000_000_1&#13;
```&#13;
## [数值类型转换 (Numeric Type Conversion)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Numeric-Type-Conversion)&#13;
---&#13;
🕐 赋值不在数值类型范围内的值将会报错&#13;
&#13;
🕑 不同数值类型间不能直接操作,需显式进行类型转换:&#13;
```swift&#13;
let x: UInt16 = 2_000&#13;
let y: UInt8 = 1&#13;
let z = x + UInt16(y)&#13;
```&#13;
## [类型别名 (Type Aliases)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Type-Aliases)&#13;
---&#13;
给类型取一个别名:&#13;
```swift&#13;
typealias MyType = UInt16&#13;
var n = MyType.min&#13;
```&#13;
## [布尔值 (Booleans)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Booleans)&#13;
---&#13;
🕐 赋值:&#13;
```swift&#13;
let t = true&#13;
let f = false&#13;
```&#13;
&#13;
🕑 不是非 0 就是 true, 布尔就是布尔:&#13;
```swift&#13;
let n = 1&#13;
if n {&#13;
    // error&#13;
}&#13;
```&#13;
&#13;
&gt; 这是与其他语言较为不同的地方&#13;
## [元组 (Tuples)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Tuples)&#13;
---&#13;
🕐 元组定义与赋值:&#13;
```swift&#13;
let info = ('root', 123456)&#13;
let (user, passwd) = info&#13;
```&#13;
&#13;
🕑 赋值时使用下划线忽略:&#13;
```swift&#13;
let (user1, _) = info&#13;
```&#13;
### 索引 (Index)&#13;
&#13;
&gt; 这是比较新颖的地方, 某种程度上看起来像是 python 的字典&#13;
&#13;
🕐 通过数值索引获取元素:&#13;
```swift&#13;
print(info.0, info.1)&#13;
```&#13;
&#13;
🕑 通过名称获取元素:&#13;
```swift&#13;
let info = (user: 'root', passwd: 123456)&#13;
print(info.user, info.passwd)&#13;
```&#13;
## [可选类型 (Optionals)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Optionals)&#13;
---&#13;
🕐 定义方式: 在类型后加上 `?`&#13;
&#13;
🕑 可选类型要么有值要么为 `nil`:&#13;
```swift&#13;
var n: Int? = 404&#13;
n = nil // 可选类型可赋值 nil&#13;
```&#13;
&#13;
&gt; Swift 是非空类型的安全系统, 其要求每个量的类型都是明确的, 因此直接给量赋 `nil` 是不安全的. 推荐在可能出现 `nil` 的地方都使用可选类型, 可以把可选类型理解为一个安全的包装器&#13;
### [可选类型绑定 (Optional Binding)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Optional-Binding)&#13;
&#13;
即在条件表达式中使用赋值语句提取可选类型中的值&#13;
&#13;
🕐 当有值时, 条件表达式为 `true`, 同时提取值:&#13;
```swift&#13;
if let n = Int('123') { // 类型转换会返回可选值&#13;
    print('The number is \(n)')&#13;
} else {&#13;
    print('error')&#13;
}&#13;
```&#13;
&#13;
🕑 当条件表达式中的局部变量名与外层相同时可简写:&#13;
```swift&#13;
let n = Int('123')&#13;
if let n {&#13;
    print('My number is \(n)')&#13;
}&#13;
```&#13;
&#13;
🕒 同时进行多个可选类型绑定:&#13;
```swift&#13;
if let a = Int('4'), let b = Int('42'), a &lt; b &amp;&amp; b &lt; 100 {&#13;
    print('\(a) &lt; \(b) &lt; 100')&#13;
}&#13;
```&#13;
&#13;
&gt; 到这里可以将'可选类型绑定'理解为: 在条件语句中赋值可选类型, 就好像是使用普通类型一样&#13;
### [提供备选值 (Providing a Fallback Value)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Providing-a-Fallback-Value)&#13;
&#13;
使用 `??` 解包可选类型, 当其为 `nil` 时提供备选值:&#13;
```swift&#13;
let name: String? = nil&#13;
let greeting = 'Hello, ' + (name ?? 'root') + '!'&#13;
print(greeting)&#13;
```&#13;
### [强制解包 (Force Unwrapping)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Force-Unwrapping)&#13;
&#13;
使用 `!` 解包可选值, 若为 `nil` 将触发错误:&#13;
```swift&#13;
let s = '123s'&#13;
let i = Int(s)&#13;
let n = i!&#13;
```&#13;
### [隐式解包 (Implicitly Unwrapped Optionals)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics#Implicitly-Unwrapped-Optionals)&#13;
&#13;
适用于'当可选值有值后就一定保持有值'的情况&#13;
&#13;
🕐 定义方式: 类型后加上 `!`, 相当于可隐式解包的可选类型&#13;
&#13;
🕑 比可选类型多了自动隐式解包功能:&#13;
```swift&#13;
let user: String! = 'root'&#13;
let name: String = user&#13;
```&#13;
## [错误处理 (Error Handling)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics/#Error-Handling)&#13;
---&#13;
🕐 使用 `throws` 表明一个函数会抛出错误:&#13;
```swift&#13;
func f() throws {&#13;
	...&#13;
}&#13;
```&#13;
&#13;
🕑 处理错误的语句:&#13;
```swift&#13;
do {&#13;
	try f()&#13;
} catch {&#13;
	...&#13;
} catch {&#13;
	... &#13;
}&#13;
```&#13;
`try` 表明该函数可能会抛出错误, `catch` 用于捕获错误&#13;
## [断言和前置条件 (Assertions and Preconditions)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics/#Assertions-and-Preconditions)&#13;
---&#13;
'断言'和'前置条件'都是用于捕获意外的错误, 当不满足时中断程序执行; 前者只在开发环境中生效&#13;
&#13;
&gt; 与'错误处理'不同的是, 错误处理处理的是可预见的错误, 而这里的错误是意外的, 不可预知的, 因而不一定能够复现&#13;
### [使用断言 Debug (Debugging with Assertions)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics/#Debugging-with-Assertions)&#13;
&#13;
```swift&#13;
let n = -3&#13;
assert(n &gt;= 0, 'this is an error description') // 描述可省略&#13;
```&#13;
&#13;
手动触发断言错误:&#13;
```swift&#13;
let n = -3&#13;
if n &gt; 0 {&#13;
    assertionFailure('error')&#13;
} else {&#13;
    print('pass')&#13;
}&#13;
```&#13;
### [执行前置条件 (Enforcing Preconditions)](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics/#Enforcing-Preconditions)&#13;
&#13;
```swift&#13;
let n = -3&#13;
precondition(n &gt; 0, 'this is an error descriptoin')&#13;
```&#13;
&#13;
手动触发前置条件错误:&#13;
```swift&#13;
let n = -3&#13;
if n &gt; 0 {&#13;
    preconditionFailure('error')&#13;
} else {&#13;
    print('pass')&#13;
}&#13;
```&#13;
&#13;
&gt; 关于这部分的使用还可以更进一步, 不过目前了解一下就足够了&#13;
&#13;
&#13;
&#13;
&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/assets/GmeekTOC.js'&gt;&lt;/script&gt;'}## --&gt;。</description><guid isPermaLink="true">https://cell.237927.xyz/post/%5BSwift%20-guan-fang-jiao-cheng-%5D01%20-ji-chu-bu-fen.html</guid><pubDate>Wed, 24 Jul 2024 08:48:30 +0000</pubDate></item><item><title>直接从Obsidian发布文章</title><link>https://cell.237927.xyz/post/zhi-jie-cong-Obsidian-fa-bu-wen-zhang.html</link><description>使用插件：[obsidian-github-issues](https://github.com/frostplexx/obsidian-github-issues)

这个插件可以在Ob中提交issues，并设置labels，这样就完美符合了Gmeek的发布文章需求。</description><guid isPermaLink="true">https://cell.237927.xyz/post/zhi-jie-cong-Obsidian-fa-bu-wen-zhang.html</guid><pubDate>Mon, 15 Jul 2024 09:02:22 +0000</pubDate></item><item><title>[转载]Swift入门教程</title><link>https://cell.237927.xyz/post/%5B-zhuan-zai-%5DSwift-ru-men-jiao-cheng.html</link><description>&gt; 原文地址 ['一篇入门swift的学习笔记' by __MrCool](https://blog.csdn.net/Void_leng/article/details/114254504#24__171)&#13;
&#13;
&lt;!-- ### 文章目录&#13;
&#13;
*   *   *   [1. 读后概述](#1)&#13;
        *   [2. 语法笔记](#2)&#13;
        *   *   [2.1 说明](#2.1)&#13;
            *   [2.2 基础类型](#2.2)&#13;
            *   [2.3 运算符](#2.3)&#13;
            *   [2.4 字符与字符串](#2.4)&#13;
            *   [2.5 控制流](#2.5)&#13;
            *   [2.6 函数](#2.6)&#13;
            *   [2.7 闭包](#2.7)&#13;
            *   [2.8 枚举、结构体、类](#2.8)&#13;
            *   [2.9 类的构造与析构](#2.9)&#13;
            *   [2.10 属性监听器](#2.10)&#13;
            *   [2.11 类的继承](#2.11)&#13;
            *   [2.12 扩展](#2.12)&#13;
            *   [2.13 协议](#2.13)&#13;
            *   [2.14 泛型](#2.14)&#13;
        *   [3. 总结](#3)&#13;
--&gt;&#13;
&lt;a a='1'&gt;&lt;/span&gt;&#13;
## 1. 读后概述&#13;
&#13;
阅读完[《the swift programming language 中文版》](https://swiftgg.gitbook.io/swift/)，对 swift 语言有了初步的认识。</description><guid isPermaLink="true">https://cell.237927.xyz/post/%5B-zhuan-zai-%5DSwift-ru-men-jiao-cheng.html</guid><pubDate>Sat, 13 Jul 2024 14:35:31 +0000</pubDate></item><item><title>Andy留给Red的信</title><link>https://cell.237927.xyz/post/Andy-liu-gei-Red-de-xin.html</link><description>Dear Red,&#13;
&#13;
If you're reading this, you've gotten out. And if you've come this far, maybe you're willing to come a little further. You remember the name of the town, don't you? I could use a good man to help me get my project on wheels. I'll keep an eye out for you and the chessboard ready.&#13;
&#13;
Remember, Red. Hope is a good thing, maybe the best of things, and no good thing ever dies. I will be hoping that this letter finds you, and finds you well.&#13;
&#13;
Your friend,&#13;
&#13;
Andy。</description><guid isPermaLink="true">https://cell.237927.xyz/post/Andy-liu-gei-Red-de-xin.html</guid><pubDate>Fri, 05 Jul 2024 16:33:53 +0000</pubDate></item><item><title>常用站点收藏</title><link>https://cell.237927.xyz/post/chang-yong-zhan-dian-shou-cang.html</link><description>---&#13;
## **云盘搜索**&#13;
https://www.yunpan1.cc/&#13;
https://pan666.net/&#13;
https://www.wpzysq.com/&#13;
&#13;
---&#13;
## **影视合集**&#13;
[电视剧.韩剧.韩语中字](https://www.aliyundrive.com/s/JHpBvN6QUac)&#13;
[合集贴](https://slowread.net/ali110.html)&#13;
&#13;
---&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://cell.237927.xyz/post/chang-yong-zhan-dian-shou-cang.html</guid><pubDate>Sun, 07 Apr 2024 08:14:05 +0000</pubDate></item><item><title>简易的小站</title><link>https://cell.237927.xyz/post/jian-yi-de-xiao-zhan.html</link><description>在这里记录下今后的日子，过去的已经过去，希望会带着我走向明天。</description><guid isPermaLink="true">https://cell.237927.xyz/post/jian-yi-de-xiao-zhan.html</guid><pubDate>Sun, 07 Apr 2024 07:23:26 +0000</pubDate></item><item><title>关于本站</title><link>https://cell.237927.xyz/about.html</link><description>如您所见，这是一个关于肖申克的救赎的小站。</description><guid isPermaLink="true">https://cell.237927.xyz/about.html</guid><pubDate>Sat, 06 Jul 2024 05:58:55 +0000</pubDate></item></channel></rss>